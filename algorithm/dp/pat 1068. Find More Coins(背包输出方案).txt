/*
背包问题 求刚好装满，装的个数最多，并输出字典序最小的输出方案。参加背包9讲
*/

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<map>
#include<cstring>
#include<queue>
using namespace std;
#define INF 0x3fffffff
/*
dp[i][j] = max(dp[i-1][j],dp[i-1][j-cost[i]])
*/
int dp[10002][102];
int cost[10010];

bool cmp1(const int& x,const int& y)
{
	return x>y;
}
int main()
{

//	freopen("in.txt","r",stdin);
	int n,m;

	while(scanf("%d%d",&n,&m)!=EOF)
	{
		
		for(int i=1;i<=n;++i)
			scanf("%d",cost+i);
		sort(cost+1,cost+n+1,cmp1);
		for(int v=1;v<=m;++v)
		{
			for(int i=0;i<=n;++i)
			dp[i][v]=-INF;
		}
	
		dp[0][0]=0;
		for(int i=1;i<=n;++i)
		{
			for(int v=cost[i];v<=m;++v)
			{
				dp[i][v] = max(dp[i-1][v-cost[i]]+1,dp[i-1][v]);
			}
		}
		if(dp[n][m]<=0)
			printf("No Solution\n");
		else
		{
		//for(int i=0;i<=n;++i)
		//{
		//	for(int j=0;j<=m;++j)
		//		printf("%d ",dp[i][j]);
		//	printf("\n");
		//}
		//printf("%d\n",dp[n][m]);
		int cnt=0;
		//int ans[110];
		
		for(int i=n,v=m;i>=0;--i)
		{
			if(dp[i][v]==dp[i-1][v-cost[i]]+1)
			{
				v-=cost[i];
				if(cnt==0)
				{
					printf("%d",cost[i]);
					cnt=1;
				}
				else
					printf(" %d",cost[i]);
				
			}

		}

		printf("\n");
		}
	}
	return 0;
}