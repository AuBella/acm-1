#include<iostream>
#include<cstdio>
#include<map>
#include<string>
using namespace std;
const int MOD = 1000007;
const int TABLESIZE = 2000000;
struct HashNode{
	char s[24];
	HashNode* next;
	char sv[24];
};
struct HashTable{

	HashNode hash[TABLESIZE],*h[MOD],*cur;
	void init()
	{
		memset(h,0,sizeof(h));
		cur = hash;
	}
	unsigned int BKDRHash(const char *str)
	{
		unsigned int seed = 131; // 31 131 1313 13131 131313 etc..
		unsigned int hash = 0;

		while (*str)
		{
			hash = hash * seed + (*str++);
		}

		return (hash & 0x7FFFFFFF)%MOD;
	}	
	int insert(const char* s)
	{
		int hv  = BKDRHash(s);
		HashNode* p = h[hv];
		while(p)
		{
			if(!strcmp(p->s,s))
				return p-hash;
			else
				p = p->next;
		}
		strcpy(cur->s,s);
		cur->next = h[hv];
		h[hv] = cur++;
		return cur-1-hash;
	}
	int find(const char* s)
	{
		int hv = BKDRHash(s);
		HashNode* p = h[hv];
		while(p)
		{
			if(!strcmp(s,p->s))
				return p-hash;
			else
				p=p->next;
		}
		return -1;
	}
};


HashTable hashtab;
void solve(int ca)
{
	hashtab.init();
	int n,m;
	scanf("%d%d",&n,&m);
	char s[101],s1[24],s2[24];
	int h1,h2;
	while(m--)
	{
		scanf("%s%s",s1,s2);
		h1 = hashtab.insert(s1);
		strcpy(hashtab.hash[h1].sv,s2);
	}
	getchar();
	gets(s);
	
	int hv;
	bool flag = false;
	for(int i=0;i<s[i];++i)
	{
		int clen = 0;
		while(s[i] && s[i]!=' ')s1[clen++] = s[i++];
		s1[clen]=0;
		for(int j=1;j<n;++j)
		{
			hv = hashtab.find(s1);
			if(hv == -1)break;
			strcpy(s1,hashtab.hash[hv].sv);
		}
		if(flag)printf(" %s",s1);
		else 
		{
			flag= 1;
			printf("%s",s1);
		}
	}
	printf("\n");
}
int main()
{
	freopen("in","r",stdin);
	int T;
	scanf("%d",&T);
	for(int i=1;i<=T;++i)
	{
		solve(i);
	}
	return 0;
}